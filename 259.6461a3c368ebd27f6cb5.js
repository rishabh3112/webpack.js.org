(self.webpackChunk=self.webpackChunk||[]).push([[259],{259:function(n,s,a){"use strict";a.r(s),s.default='<p>Aside from applications, webpack can also be used to bundle JavaScript libraries. The following guide is meant for library authors looking to streamline their bundling strategy.</p> <h2 id="authoring-a-library">Authoring a Library<a href="#authoring-a-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Let\'s assume that you are writing a small library ,<code>webpack-numbers</code>, that allows users to convert the numbers 1 through 5 from their numeric representation to a textual one and vice-versa, e.g. 2 to \'two\'.</p> <p>The basic project structure may look like this:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  |- webpack.config.js\n</span><span class="token prefix inserted">+</span><span class="token line">  |- package.json\n</span><span class="token prefix inserted">+</span><span class="token line">  |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">    |- index.js\n</span><span class="token prefix inserted">+</span><span class="token line">    |- ref.json</span></span></code></pre> <p>Initialize npm, install webpack and lodash:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack lodash</code></pre> <p><strong>src/ref.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"One"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Two"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Three"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Four"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Five"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Zero"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    numRef<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'\'</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    numRef<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&#x26;&#x26;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>The usage specification for the library use will be as follows:</p> <ul> <li><strong>ES2015 module import:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpackNumbers <span class="token keyword">from</span> <span class="token string">\'webpack-numbers\'</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li><strong>CommonJS module require:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpackNumbers <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-numbers\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\nwebpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <ul> <li><strong>AMD module require:</strong></li> </ul> <pre><code class="hljs language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'webpackNumbers\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">webpackNumbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Two\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The consumer also can use the library by loading it via a script tag:</p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  ...\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/webpack-numbers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// ...</span>\n    <span class="token comment">// Global variable</span>\n    webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Property in the window object</span>\n    window<span class="token punctuation">.</span>webpackNumbers<span class="token punctuation">.</span><span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token string">\'Five\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>Note that we can also configure it to expose the library in the following ways:</p> <ul> <li>Property in the global object, for node.</li> <li>Property in the <code>this</code> object.</li> </ul> <p>For full library configuration and code please refer to <a href="https://github.com/kalcifer/webpack-library-example">webpack-library-example</a>.</p> <h2 id="base-configuration">Base Configuration<a href="#base-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Now let\'s bundle this library in a way that will achieve the following goals:</p> <ul> <li>Using <code>externals</code> to avoid bundling <code>lodash</code>, so the consumer is required to load it.</li> <li>Setting the library name as <code>webpack-numbers</code>.</li> <li>Exposing the library as a variable called <code>webpackNumbers</code>.</li> <li>Being able to access the library inside Node.js.</li> </ul> <p>Also, the consumer should be able to access the library in the following ways:</p> <ul> <li>ES2015 module. i.e. <code>import webpackNumbers from \'webpack-numbers\'</code>.</li> <li>CommonJS module. i.e. <code>require(\'webpack-numbers\')</code>.</li> <li>Global variable when included through <code>script</code> tag.</li> </ul> <p>We can start with this basic webpack configuration:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="base-configuration-with-source-map">Base Configuration with source map<a href="#base-configuration-with-source-map" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Source maps is a useful debugging tool that allows you to view where the minified code originated from.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'source-map\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">devtool</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  devtool<span class="token punctuation">,</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote> <p>For more information about getting source maps setup and available options please refer to <a href="https://webpack.js.org/configuration/devtool/">Devtool configuration</a></p> </blockquote> <blockquote> <p>To see code examples please refer to <a href="https://github.com/webpack/webpack/tree/master/examples/source-map">webpack repository</a></p> </blockquote> <h2 id="externalize-lodash">Externalize Lodash<a href="#externalize-lodash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Now, if you run <code>webpack</code>, you will find that a largish bundle is created. If you inspect the file, you\'ll see that lodash has been bundled along with your code. In this case, we\'d prefer to treat <code>lodash</code> as a <em>peer dependency</em>. Meaning that the consumer should already have <code>lodash</code> installed. Hence you would want to give up control of this external library to the consumer of your library.</p> <p>This can be done using the <code>externals</code> configuration:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   externals: {\n</span><span class="token prefix inserted">+</span><span class="token line">     lodash: {\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">       root: \'_\',\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>This means that your library expects a dependency named <code>lodash</code> to be available in the consumer\'s environment.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Note that if you only plan on using your library as a dependency in another webpack bundle, you may specify <code>externals</code> as an array.</p></aside> <h2 id="external-limitations">External Limitations<a href="#external-limitations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>For libraries that use several files from a dependency:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">\'library/one\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">\'library/two\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span></code></pre> <p>You won\'t be able to exclude them from the bundle by specifying <code>library</code> in the externals. You\'ll either need to exclude them one by one or by using a regular expression.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'library/one\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'library/two\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// Everything that starts with "library/"</span>\n    <span class="token operator">/</span><span class="token operator">^</span>library\\<span class="token regex">/.+$/</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="expose-the-library">Expose the Library<a href="#expose-the-library" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>For widespread use of the library, we would like it to be compatible in different environments, i.e. CommonJS, AMD, Node.js and as a global variable. To make your library available for consumption, add the <code>library</code> property inside <code>output</code>:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     library: \'webpackNumbers\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   externals: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     lodash: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       root: \'_\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Note that the <code>library</code> setup is tied to the <code>entry</code> configuration. For most libraries, specifying a single entry point is sufficient. While <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">multi-part libraries</a> are possible, it is simpler to expose partial exports through an <a href="https://stackoverflow.com/questions/34072598/es6-exporting-importing-in-index-file">index script</a> that serves as a single entry point. Using an <code>array</code> as an <code>entry</code> point for a library is <strong>not recommended</strong>.</p></aside> <p>This exposes your library bundle available as a global variable named <code>webpackNumbers</code> when imported. To make the library compatible with other environments, add <code>libraryTarget</code> property to the config. This will add various options about how the library can be exposed.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'webpack-numbers.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     library: \'webpackNumbers\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     libraryTarget: \'umd\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   externals: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     lodash: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       commonjs2: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       amd: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">       root: \'_\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>You can expose the library in the following ways:</p> <ul> <li>Variable: as a global variable made available by a <code>script</code> tag (<code>libraryTarget:\'var\'</code>).</li> <li>This: available through the <code>this</code> object (<code>libraryTarget:\'this\'</code>).</li> <li>Window: available through the <code>window</code> object, in the browser (<code>libraryTarget:\'window\'</code>).</li> <li>UMD: available under AMD or CommonJS <code>require</code> (<code>libraryTarget:\'umd\'</code>).</li> </ul> <p>If <code>library</code> is set and <code>libraryTarget</code> is not, <code>libraryTarget</code> defaults to <code>var</code> as specified in the <a href="/configuration/output">output configuration documentation</a>. See <a href="/configuration/output/#outputlibrarytarget"><code>output.libraryTarget</code></a> there for a detailed list of all available options.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>With webpack 3.5.5, using <code>libraryTarget: { root:\'_\' }</code> doesn\'t work properly (as stated in <a href="https://github.com/webpack/webpack/issues/4824">issue 4824</a>). However, you can set <code>libraryTarget: { var: \'_\' }</code> to expect the library as a global variable.</p></aside> <h3 id="final-steps">Final Steps<a href="#final-steps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Optimize your output for production by following the steps mentioned in the <a href="/guides/production">production guide</a>. Let\'s also add the path to your generated bundle as the package\'s <code>main</code> field in with the <code>package.json</code></p> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>Or, to add it as a standard module as per <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md#typical-usage">this guide</a>:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  ...\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"src/index.js"</span><span class="token punctuation">,</span>\n  ...\n<span class="token punctuation">}</span></code></pre> <p>The key <code>main</code> refers to the <a href="https://docs.npmjs.com/files/package.json#main">standard from <code>package.json</code></a>, and <code>module</code> to <a href="https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md">a</a> <a href="https://github.com/rollup/rollup/wiki/pkg.module">proposal</a> to allow the JavaScript ecosystem upgrade to use ES2015 modules without breaking backwards compatibility.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>The <code>module</code> property should point to a script that utilizes ES2015 module syntax but no other syntax features that aren\'t yet supported by browsers or node. This enables webpack to parse the module syntax itself, allowing for lighter bundles via <a href="https://webpack.js.org/guides/tree-shaking/">tree shaking</a> if users are only consuming certain parts of the library.</p></aside> <p>Now you can <a href="https://docs.npmjs.com/getting-started/publishing-npm-packages">publish it as an npm package</a> and find it at <a href="https://unpkg.com/#/">unpkg.com</a> to distribute it to your users.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>To expose stylesheets associated with your library, the <a href="/plugins/mini-css-extract-plugin"><code>MiniCssExtractPlugin</code></a> should be used. Users can then consume and load these as they would any other stylesheet.</p></aside> '}}]);